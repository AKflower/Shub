"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalImpl = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const gateway_1 = require("./gateway");
const transaction_1 = require("./transaction");
class ProposalImpl {
    #client;
    #signingIdentity;
    #channelName;
    #proposedTransaction;
    #proposal;
    constructor(options) {
        this.#client = options.client;
        this.#signingIdentity = options.signingIdentity;
        this.#channelName = options.channelName;
        this.#proposedTransaction = options.proposedTransaction;
        this.#proposal = (0, gateway_1.assertDefined)(options.proposedTransaction.getProposal(), 'Missing signed proposal');
    }
    getBytes() {
        return this.#proposedTransaction.serializeBinary();
    }
    getDigest() {
        const bytes = this.#proposal.getProposalBytes_asU8();
        return this.#signingIdentity.hash(bytes);
    }
    getTransactionId() {
        return this.#proposedTransaction.getTransactionId();
    }
    async evaluate(options) {
        await this.#sign();
        const evaluateResponse = await this.#client.evaluate(this.#newEvaluateRequest(), options);
        const result = evaluateResponse.getResult();
        return result?.getPayload_asU8() ?? new Uint8Array(0);
    }
    async endorse(options) {
        await this.#sign();
        const endorseResponse = await this.#client.endorse(this.#newEndorseRequest(), options);
        const txEnvelope = (0, gateway_1.assertDefined)(endorseResponse.getPreparedTransaction(), 'Missing transaction envelope');
        return new transaction_1.TransactionImpl({
            client: this.#client,
            signingIdentity: this.#signingIdentity,
            preparedTransaction: this.#newPreparedTransaction(txEnvelope)
        });
    }
    setSignature(signature) {
        this.#proposal.setSignature(signature);
    }
    async #sign() {
        if (this.#isSigned()) {
            return;
        }
        const signature = await this.#signingIdentity.sign(this.getDigest());
        this.setSignature(signature);
    }
    #isSigned() {
        const signatureLength = this.#proposal.getSignature_asU8().length;
        return signatureLength > 0;
    }
    #newEvaluateRequest() {
        const result = new fabric_protos_1.gateway.EvaluateRequest();
        result.setTransactionId(this.#proposedTransaction.getTransactionId());
        result.setChannelId(this.#channelName);
        result.setProposedTransaction(this.#proposal);
        result.setTargetOrganizationsList(this.#proposedTransaction.getEndorsingOrganizationsList());
        return result;
    }
    #newEndorseRequest() {
        const result = new fabric_protos_1.gateway.EndorseRequest();
        result.setTransactionId(this.#proposedTransaction.getTransactionId());
        result.setChannelId(this.#channelName);
        result.setProposedTransaction(this.#proposal);
        result.setEndorsingOrganizationsList(this.#proposedTransaction.getEndorsingOrganizationsList());
        return result;
    }
    #newPreparedTransaction(envelope) {
        const result = new fabric_protos_1.gateway.PreparedTransaction();
        result.setEnvelope(envelope);
        result.setTransactionId(this.#proposedTransaction.getTransactionId());
        return result;
    }
}
exports.ProposalImpl = ProposalImpl;
//# sourceMappingURL=proposal.js.map