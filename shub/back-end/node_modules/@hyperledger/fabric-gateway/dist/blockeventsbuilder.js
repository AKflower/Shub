"use strict";
/*
 * Copyright 2022 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockAndPrivateDataEventsBuilder = exports.FilteredBlockEventsBuilder = exports.BlockEventsBuilder = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const timestamp_pb_1 = require("google-protobuf/google/protobuf/timestamp_pb");
const blockeventsrequest_1 = require("./blockeventsrequest");
const eventsbuilder_1 = require("./eventsbuilder");
function seekLargestBlockNumber() {
    const largestBlockNumber = new fabric_protos_1.orderer.SeekSpecified();
    largestBlockNumber.setNumber(Number.MAX_SAFE_INTEGER);
    const result = new fabric_protos_1.orderer.SeekPosition();
    result.setSpecified(largestBlockNumber);
    return result;
}
class BlockEventsBuilder {
    #options;
    #envelopeBuilder;
    constructor(options) {
        this.#options = options;
        this.#envelopeBuilder = new BlockEventsEnvelopeBuilder(options);
    }
    build() {
        const request = this.#envelopeBuilder.build();
        return new blockeventsrequest_1.BlockEventsRequestImpl({
            client: this.#options.client,
            request,
            signingIdentity: this.#options.signingIdentity,
        });
    }
}
exports.BlockEventsBuilder = BlockEventsBuilder;
class FilteredBlockEventsBuilder {
    #options;
    #envelopeBuilder;
    constructor(options) {
        this.#options = options;
        this.#envelopeBuilder = new BlockEventsEnvelopeBuilder(options);
    }
    build() {
        const request = this.#envelopeBuilder.build();
        return new blockeventsrequest_1.FilteredBlockEventsRequestImpl({
            client: this.#options.client,
            request,
            signingIdentity: this.#options.signingIdentity,
        });
    }
}
exports.FilteredBlockEventsBuilder = FilteredBlockEventsBuilder;
class BlockAndPrivateDataEventsBuilder {
    #options;
    #envelopeBuilder;
    constructor(options) {
        this.#options = options;
        this.#envelopeBuilder = new BlockEventsEnvelopeBuilder(options);
    }
    build() {
        const request = this.#envelopeBuilder.build();
        return new blockeventsrequest_1.BlockAndPrivateDataEventsRequestImpl({
            client: this.#options.client,
            request,
            signingIdentity: this.#options.signingIdentity,
        });
    }
}
exports.BlockAndPrivateDataEventsBuilder = BlockAndPrivateDataEventsBuilder;
class BlockEventsEnvelopeBuilder {
    #options;
    #eventsBuilder;
    constructor(options) {
        this.#options = options;
        this.#eventsBuilder = new eventsbuilder_1.EventsBuilder(options);
    }
    build() {
        const result = new fabric_protos_1.common.Envelope();
        result.setPayload(this.#newPayload().serializeBinary());
        return result;
    }
    #newPayload() {
        const result = new fabric_protos_1.common.Payload();
        result.setHeader(this.#newHeader());
        result.setData(this.#newSeekInfo().serializeBinary());
        return result;
    }
    #newHeader() {
        const result = new fabric_protos_1.common.Header();
        result.setChannelHeader(this.#newChannelHeader().serializeBinary());
        result.setSignatureHeader(this.#newSignatureHeader().serializeBinary());
        return result;
    }
    #newChannelHeader() {
        const result = new fabric_protos_1.common.ChannelHeader();
        result.setChannelId(this.#options.channelName);
        result.setEpoch(0);
        result.setTimestamp(timestamp_pb_1.Timestamp.fromDate(new Date()));
        result.setType(fabric_protos_1.common.HeaderType.DELIVER_SEEK_INFO);
        return result;
    }
    #newSignatureHeader() {
        const result = new fabric_protos_1.common.SignatureHeader();
        result.setCreator(this.#options.signingIdentity.getCreator());
        return result;
    }
    #newSeekInfo() {
        const result = new fabric_protos_1.orderer.SeekInfo();
        result.setStart(this.#eventsBuilder.getStartPosition());
        result.setStop(seekLargestBlockNumber());
        return result;
    }
}
//# sourceMappingURL=blockeventsbuilder.js.map