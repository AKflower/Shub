"use strict";
/*
 * Copyright 2023 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ECSignature = exports.newECPrivateKeySigner = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const elliptic_1 = require("elliptic");
const asn1_1 = require("./asn1");
const namedCurves = {
    'P-256': new elliptic_1.ec('p256'),
    'P-384': new elliptic_1.ec('p384'),
};
function newECPrivateKeySigner(key) {
    const { crv, d } = key.export({ format: 'jwk' });
    if (!crv) {
        throw new Error('Missing EC curve name');
    }
    if (!d) {
        throw new Error('Missing EC private key value');
    }
    const curve = getCurve(crv);
    const privateKey = Buffer.from(d, 'base64url');
    return (digest) => {
        const signature = curve.sign(digest, privateKey, { canonical: true });
        const signatureBytes = new Uint8Array(signature.toDER());
        return Promise.resolve(signatureBytes);
    };
}
exports.newECPrivateKeySigner = newECPrivateKeySigner;
function getCurve(name) {
    const curve = namedCurves[name];
    if (!curve) {
        throw new Error(`Unsupported curve: ${name}`);
    }
    return curve;
}
class ECSignature {
    #curve;
    #r;
    #s;
    constructor(curveName, compactSignature) {
        this.#curve = getCurve(curveName);
        const sIndex = compactSignature.length / 2;
        const r = compactSignature.slice(0, sIndex);
        const s = compactSignature.slice(sIndex);
        this.#r = new bn_js_1.default(r);
        this.#s = new bn_js_1.default(s);
    }
    normalise() {
        const n = this.#curve.n;
        const halfOrder = n.divn(2);
        if (this.#s.gt(halfOrder)) {
            this.#s = n.sub(this.#s);
        }
        return this;
    }
    toDER() {
        return (0, asn1_1.ecSignatureAsDER)(this.#r, this.#s);
    }
}
exports.ECSignature = ECSignature;
//# sourceMappingURL=ecdsa.js.map