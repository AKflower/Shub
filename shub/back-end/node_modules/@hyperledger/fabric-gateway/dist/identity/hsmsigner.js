"use strict";
/*
 * Copyright 2021 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HSMSignerFactoryImpl = void 0;
const pkcs11js = __importStar(require("pkcs11js"));
const ecdsa_1 = require("./ecdsa");
class HSMSignerFactoryImpl {
    #pkcs11;
    constructor(library) {
        this.#pkcs11 = new pkcs11js.PKCS11();
        this.#pkcs11.load(library);
        this.#pkcs11.C_Initialize();
    }
    dispose() {
        this.#pkcs11.C_Finalize();
    }
    newSigner(hsmSignerOptions) {
        const options = sanitizeOptions(hsmSignerOptions);
        const pkcs11 = this.#pkcs11;
        const slot = this.#findSlotForLabel(options.label);
        const session = pkcs11.C_OpenSession(slot, pkcs11js.CKF_SERIAL_SESSION);
        let privateKeyHandle;
        try {
            this.#login(session, options.userType, options.pin);
            privateKeyHandle = this.#findObjectInHSM(session, pkcs11js.CKO_PRIVATE_KEY, options.identifier);
        }
        catch (err) {
            pkcs11.C_CloseSession(session);
            throw err;
        }
        return {
            signer: (digest) => {
                pkcs11.C_SignInit(session, { mechanism: pkcs11js.CKM_ECDSA }, privateKeyHandle);
                const compactSignature = pkcs11.C_Sign(session, Buffer.from(digest), Buffer.alloc(256));
                const signature = new ecdsa_1.ECSignature('P-256', compactSignature).normalise().toDER();
                return Promise.resolve(signature);
            },
            close: () => pkcs11.C_CloseSession(session),
        };
    }
    #findSlotForLabel(pkcs11Label) {
        const slots = this.#pkcs11.C_GetSlotList(true);
        if (!slots || slots.length === 0) {
            throw new Error('No pkcs11 slots can be found');
        }
        const slot = slots.find(slotToCheck => {
            const tokenInfo = this.#pkcs11.C_GetTokenInfo(slotToCheck);
            return tokenInfo?.label?.trim() === pkcs11Label;
        });
        if (!slot) {
            throw new Error(`label ${pkcs11Label} cannot be found in the pkcs11 slot list`);
        }
        return slot;
    }
    #login(session, userType, pin) {
        try {
            this.#pkcs11.C_Login(session, userType, pin);
        }
        catch (err) {
            const pkcs11err = err;
            if (pkcs11err.code !== pkcs11js.CKR_USER_ALREADY_LOGGED_IN) {
                throw err;
            }
        }
    }
    #findObjectInHSM(session, keytype, identifier) {
        const pkcs11Template = [
            { type: pkcs11js.CKA_ID, value: identifier },
            { type: pkcs11js.CKA_CLASS, value: keytype },
            { type: pkcs11js.CKA_KEY_TYPE, value: pkcs11js.CKK_EC }
        ];
        this.#pkcs11.C_FindObjectsInit(session, pkcs11Template);
        const hsmObjects = this.#pkcs11.C_FindObjects(session, 1);
        if (!hsmObjects || hsmObjects.length === 0) {
            this.#pkcs11.C_FindObjectsFinal(session);
            throw new Error(`Unable to find object in HSM with ID ${identifier.toString()}`);
        }
        this.#pkcs11.C_FindObjectsFinal(session);
        return hsmObjects[0];
    }
}
exports.HSMSignerFactoryImpl = HSMSignerFactoryImpl;
function sanitizeOptions(hsmSignerOptions) {
    const options = Object.assign({
        userType: pkcs11js.CKU_USER,
    }, hsmSignerOptions);
    assertNotEmpty(options.label, 'label');
    assertNotEmpty(options.pin, 'pin');
    assertNotEmpty(options.identifier, 'identifier');
    return options;
}
function assertNotEmpty(property, name) {
    if (!property || property.toString().trim().length === 0) {
        throw new Error(`${name} property must be provided`);
    }
}
//# sourceMappingURL=hsmsigner.js.map