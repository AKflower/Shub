"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractImpl = void 0;
const commiterror_1 = require("./commiterror");
const proposalbuilder_1 = require("./proposalbuilder");
class ContractImpl {
    #client;
    #signingIdentity;
    #channelName;
    #chaincodeName;
    #contractName;
    constructor(options) {
        this.#client = options.client;
        this.#signingIdentity = options.signingIdentity;
        this.#channelName = options.channelName;
        this.#chaincodeName = options.chaincodeName;
        this.#contractName = options.contractName;
    }
    getChaincodeName() {
        return this.#chaincodeName;
    }
    getContractName() {
        return this.#contractName;
    }
    async evaluateTransaction(name, ...args) {
        return this.evaluate(name, { arguments: args });
    }
    async submitTransaction(name, ...args) {
        return this.submit(name, { arguments: args });
    }
    async evaluate(transactionName, options) {
        return this.newProposal(transactionName, options).evaluate();
    }
    async submit(transactionName, options) {
        const submitted = await this.submitAsync(transactionName, options);
        const status = await submitted.getStatus();
        if (!status.successful) {
            throw (0, commiterror_1.newCommitError)(status);
        }
        return submitted.getResult();
    }
    async submitAsync(transactionName, options) {
        const transaction = await this.newProposal(transactionName, options).endorse();
        return await transaction.submit();
    }
    newProposal(transactionName, options = {}) {
        return new proposalbuilder_1.ProposalBuilder(Object.assign({}, options, {
            client: this.#client,
            signingIdentity: this.#signingIdentity,
            channelName: this.#channelName,
            chaincodeName: this.#chaincodeName,
            transactionName: this.#getQualifiedTransactionName(transactionName),
        })).build();
    }
    #getQualifiedTransactionName(transactionName) {
        return this.#contractName ? `${this.#contractName}:${transactionName}` : transactionName;
    }
}
exports.ContractImpl = ContractImpl;
//# sourceMappingURL=contract.js.map