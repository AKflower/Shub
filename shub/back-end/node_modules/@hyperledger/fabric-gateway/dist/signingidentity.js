"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigningIdentity = exports.undefinedSignerMessage = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const hashes_1 = require("./hash/hashes");
exports.undefinedSignerMessage = 'No signing implementation';
const undefinedSigner = () => {
    throw new Error(exports.undefinedSignerMessage);
};
class SigningIdentity {
    #identity;
    #creator;
    #hash;
    #sign;
    constructor(options) {
        this.#identity = {
            mspId: options.identity.mspId,
            credentials: Uint8Array.from(options.identity.credentials)
        };
        const serializedIdentity = new fabric_protos_1.msp.SerializedIdentity();
        serializedIdentity.setMspid(options.identity.mspId);
        serializedIdentity.setIdBytes(options.identity.credentials);
        this.#creator = serializedIdentity.serializeBinary();
        this.#hash = options.hash ?? hashes_1.sha256;
        this.#sign = options.signer ?? undefinedSigner;
    }
    getIdentity() {
        return {
            mspId: this.#identity.mspId,
            credentials: Uint8Array.from(this.#identity.credentials)
        };
    }
    getCreator() {
        return Uint8Array.from(this.#creator);
    }
    hash(message) {
        return this.#hash(message);
    }
    async sign(digest) {
        return this.#sign(digest);
    }
}
exports.SigningIdentity = SigningIdentity;
//# sourceMappingURL=signingidentity.js.map