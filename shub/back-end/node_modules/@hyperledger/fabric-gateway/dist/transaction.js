"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionImpl = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const gateway_1 = require("./gateway");
const submittedtransaction_1 = require("./submittedtransaction");
const transactionparser_1 = require("./transactionparser");
class TransactionImpl {
    #client;
    #signingIdentity;
    #channelName;
    #preparedTransaction;
    #envelope;
    #result;
    constructor(options) {
        this.#client = options.client;
        this.#signingIdentity = options.signingIdentity;
        this.#preparedTransaction = options.preparedTransaction;
        const envelope = (0, gateway_1.assertDefined)(options.preparedTransaction.getEnvelope(), 'Missing envelope');
        this.#envelope = envelope;
        const { channelName, result } = (0, transactionparser_1.parseTransactionEnvelope)(envelope);
        this.#channelName = channelName;
        this.#result = result;
    }
    getBytes() {
        return this.#preparedTransaction.serializeBinary();
    }
    getDigest() {
        const payload = this.#envelope.getPayload_asU8();
        return this.#signingIdentity.hash(payload);
    }
    getResult() {
        return this.#result;
    }
    getTransactionId() {
        return this.#preparedTransaction.getTransactionId();
    }
    async submit(options) {
        await this.#sign();
        await this.#client.submit(this.#newSubmitRequest(), options);
        return new submittedtransaction_1.SubmittedTransactionImpl({
            client: this.#client,
            signingIdentity: this.#signingIdentity,
            transactionId: this.getTransactionId(),
            signedRequest: this.#newSignedCommitStatusRequest(),
            result: this.getResult(),
        });
    }
    setSignature(signature) {
        this.#envelope.setSignature(signature);
    }
    async #sign() {
        if (this.#isSigned()) {
            return;
        }
        const signature = await this.#signingIdentity.sign(this.getDigest());
        this.setSignature(signature);
    }
    #isSigned() {
        const signatureLength = this.#envelope.getSignature_asU8()?.length || 0;
        return signatureLength > 0;
    }
    #newSubmitRequest() {
        const result = new fabric_protos_1.gateway.SubmitRequest();
        result.setTransactionId(this.getTransactionId());
        result.setChannelId(this.#channelName);
        result.setPreparedTransaction(this.#envelope);
        return result;
    }
    #newSignedCommitStatusRequest() {
        const result = new fabric_protos_1.gateway.SignedCommitStatusRequest();
        result.setRequest(this.#newCommitStatusRequest().serializeBinary());
        return result;
    }
    #newCommitStatusRequest() {
        const result = new fabric_protos_1.gateway.CommitStatusRequest();
        result.setChannelId(this.#channelName);
        result.setTransactionId(this.getTransactionId());
        result.setIdentity(this.#signingIdentity.getCreator());
        return result;
    }
}
exports.TransactionImpl = TransactionImpl;
//# sourceMappingURL=transaction.js.map