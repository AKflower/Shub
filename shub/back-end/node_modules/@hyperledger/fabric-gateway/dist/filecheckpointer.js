"use strict";
/*
 * Copyright 2022 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileCheckPointer = void 0;
const fs_1 = __importDefault(require("fs"));
class FileCheckPointer {
    #path;
    #blockNumber;
    #transactionId;
    constructor(path) {
        this.#path = path;
    }
    async init() {
        await this.#loadFromFile();
        await this.#saveToFile();
    }
    async checkpointBlock(blockNumber) {
        this.#blockNumber = blockNumber + BigInt(1);
        this.#transactionId = undefined;
        await this.#saveToFile();
    }
    async checkpointTransaction(blockNumber, transactionId) {
        this.#blockNumber = blockNumber;
        this.#transactionId = transactionId;
        await this.#saveToFile();
    }
    async checkpointChaincodeEvent(event) {
        await this.checkpointTransaction(event.blockNumber, event.transactionId);
    }
    getBlockNumber() {
        return this.#blockNumber;
    }
    getTransactionId() {
        return this.#transactionId;
    }
    async #loadFromFile() {
        const fileDataBuffer = await this.#readFile();
        if (fileDataBuffer) {
            const data = fileDataBuffer.toString();
            if (data.length !== 0) {
                const state = JSON.parse(data);
                this.#setState(state);
            }
        }
    }
    async #readFile() {
        try {
            return await fs_1.default.promises.readFile(this.#path);
        }
        catch (e) {
            // ignore file not exist error.
        }
        return;
    }
    #setState(state) {
        this.#blockNumber = state.blockNumber != undefined ? BigInt(state.blockNumber) : state.blockNumber;
        this.#transactionId = state.transactionId;
    }
    #getState() {
        return {
            blockNumber: this.#blockNumber?.toString(),
            transactionId: this.#transactionId,
        };
    }
    async #saveToFile() {
        const state = this.#getState();
        const bufferState = Buffer.from(JSON.stringify(state));
        await fs_1.default.promises.writeFile(this.#path, bufferState);
    }
}
exports.FileCheckPointer = FileCheckPointer;
//# sourceMappingURL=filecheckpointer.js.map