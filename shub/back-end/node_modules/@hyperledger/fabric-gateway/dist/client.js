"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.newGatewayClient = exports.deliverWithPrivateDataMethod = exports.deliverFilteredMethod = exports.deliverMethod = exports.chaincodeEventsMethod = exports.commitStatusMethod = exports.submitMethod = exports.endorseMethod = exports.evaluateMethod = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const commitstatuserror_1 = require("./commitstatuserror");
const endorseerror_1 = require("./endorseerror");
const gatewayerror_1 = require("./gatewayerror");
const submiterror_1 = require("./submiterror");
exports.evaluateMethod = '/gateway.Gateway/Evaluate';
exports.endorseMethod = '/gateway.Gateway/Endorse';
exports.submitMethod = '/gateway.Gateway/Submit';
exports.commitStatusMethod = '/gateway.Gateway/CommitStatus';
exports.chaincodeEventsMethod = '/gateway.Gateway/ChaincodeEvents';
exports.deliverMethod = '/protos.Deliver/Deliver';
exports.deliverFilteredMethod = '/protos.Deliver/DeliverFiltered';
exports.deliverWithPrivateDataMethod = '/protos.Deliver/DeliverWithPrivateData';
// @ts-expect-error Polyfill for Symbol.dispose if not present
Symbol.dispose ??= Symbol('Symbol.dispose');
class GatewayClientImpl {
    #client;
    #defaultOptions;
    constructor(client, defaultOptions) {
        this.#client = client;
        this.#defaultOptions = Object.assign({}, defaultOptions);
    }
    evaluate(request, options) {
        return new Promise((resolve, reject) => this.#client.makeUnaryRequest(exports.evaluateMethod, serialize, deserializeEvaluateResponse, request, buildOptions(this.#defaultOptions.evaluateOptions, options), newUnaryCallback(resolve, reject)));
    }
    endorse(request, options) {
        return new Promise((resolve, reject) => this.#client.makeUnaryRequest(exports.endorseMethod, serialize, deserializeEndorseResponse, request, buildOptions(this.#defaultOptions.endorseOptions, options), newUnaryCallback(resolve, reject, err => new endorseerror_1.EndorseError(Object.assign(err, { transactionId: request.getTransactionId() })))));
    }
    submit(request, options) {
        return new Promise((resolve, reject) => this.#client.makeUnaryRequest(exports.submitMethod, serialize, deserializeSubmitResponse, request, buildOptions(this.#defaultOptions.submitOptions, options), newUnaryCallback(resolve, reject, err => new submiterror_1.SubmitError(Object.assign(err, { transactionId: request.getTransactionId() })))));
    }
    commitStatus(request, options) {
        return new Promise((resolve, reject) => this.#client.makeUnaryRequest(exports.commitStatusMethod, serialize, deserializeCommitStatusResponse, request, buildOptions(this.#defaultOptions.commitStatusOptions, options), newUnaryCallback(resolve, reject, err => {
            const req = fabric_protos_1.gateway.CommitStatusRequest.deserializeBinary(request.getRequest_asU8());
            return new commitstatuserror_1.CommitStatusError(Object.assign(err, { transactionId: req.getTransactionId() }));
        })));
    }
    chaincodeEvents(request, options) {
        return this.#makeServerStreamRequest(exports.chaincodeEventsMethod, deserializeChaincodeEventsResponse, request, buildOptions(this.#defaultOptions.chaincodeEventsOptions, options));
    }
    #makeServerStreamRequest(method, deserialize, argument, options) {
        try {
            const serverStream = this.#client.makeServerStreamRequest(method, serialize, deserialize, argument, options);
            return {
                [Symbol.asyncIterator]: () => wrapAsyncIterator(serverStream[Symbol.asyncIterator]()),
                close: () => serverStream.cancel(),
                [Symbol.dispose]: () => serverStream.cancel(),
            };
        }
        catch (err) {
            rethrowGrpcError(err);
        }
    }
    blockEvents(request, options) {
        return this.#makeBidiStreamRequest(exports.deliverMethod, deserializeDeliverResponse, request, buildOptions(this.#defaultOptions.blockEventsOptions, options));
    }
    filteredBlockEvents(request, options) {
        return this.#makeBidiStreamRequest(exports.deliverFilteredMethod, deserializeDeliverResponse, request, buildOptions(this.#defaultOptions.filteredBlockEventsOptions, options));
    }
    blockAndPrivateDataEvents(request, options) {
        return this.#makeBidiStreamRequest(exports.deliverWithPrivateDataMethod, deserializeDeliverResponse, request, buildOptions(this.#defaultOptions.blockAndPrivateDataEventsOptions, options));
    }
    #makeBidiStreamRequest(method, deserialize, request, options) {
        try {
            const duplexStream = this.#client.makeBidiStreamRequest(method, serialize, deserialize, options);
            duplexStream.write(request);
            return {
                [Symbol.asyncIterator]: () => wrapAsyncIterator(duplexStream[Symbol.asyncIterator]()),
                close: () => duplexStream.cancel(),
                [Symbol.dispose]: () => duplexStream.cancel(),
            };
        }
        catch (err) {
            rethrowGrpcError(err);
        }
    }
}
function buildOptions(defaultOptions, options) {
    return Object.assign({}, defaultOptions?.(), options);
}
function newUnaryCallback(resolve, reject, wrap = (err => err)) {
    return (err, value) => {
        if (err) {
            return reject(wrap((0, gatewayerror_1.newGatewayError)(err)));
        }
        if (value == null) {
            return reject(new Error('No result returned'));
        }
        return resolve(value);
    };
}
function wrapAsyncIterator(iterator) {
    return {
        next: async (...args) => {
            try {
                return await iterator.next(...args);
            }
            catch (err) {
                rethrowGrpcError(err);
            }
        }
    };
}
function rethrowGrpcError(err) {
    if (isServiceError(err)) {
        throw (0, gatewayerror_1.newGatewayError)(err);
    }
    throw err;
}
function isServiceError(err) {
    return typeof err.code === 'number' &&
        typeof err.details === 'string' &&
        err.metadata instanceof grpc_js_1.Metadata &&
        err instanceof Error;
}
function serialize(message) {
    const bytes = message.serializeBinary();
    return Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength); // Create a Buffer view to avoid copying
}
function deserializeEvaluateResponse(bytes) {
    return fabric_protos_1.gateway.EvaluateResponse.deserializeBinary(bytes);
}
function deserializeEndorseResponse(bytes) {
    return fabric_protos_1.gateway.EndorseResponse.deserializeBinary(bytes);
}
function deserializeSubmitResponse(bytes) {
    return fabric_protos_1.gateway.SubmitResponse.deserializeBinary(bytes);
}
function deserializeCommitStatusResponse(bytes) {
    return fabric_protos_1.gateway.CommitStatusResponse.deserializeBinary(bytes);
}
function deserializeChaincodeEventsResponse(bytes) {
    return fabric_protos_1.gateway.ChaincodeEventsResponse.deserializeBinary(bytes);
}
function deserializeDeliverResponse(bytes) {
    return fabric_protos_1.peer.DeliverResponse.deserializeBinary(bytes);
}
function newGatewayClient(client, defaultOptions) {
    return new GatewayClientImpl(client, defaultOptions);
}
exports.newGatewayClient = newGatewayClient;
//# sourceMappingURL=client.js.map