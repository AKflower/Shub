"use strict";
/*
 * Copyright 2021 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha3_384 = exports.sha3_256 = exports.sha384 = exports.sha256 = exports.none = void 0;
const crypto_1 = require("crypto");
/**
 * Returns the input message unchanged. This can be used if the signing implementation requires the full message bytes,
 * not just a pre-generated digest, such as Ed25519.
 */
const none = (message) => message;
exports.none = none;
/**
 * SHA256 hash the supplied message bytes to create a digest for signing.
 */
const sha256 = (message) => digest('sha256', message);
exports.sha256 = sha256;
/**
 * SHA384 hash the supplied message bytes to create a digest for signing.
 */
const sha384 = (message) => digest('sha384', message);
exports.sha384 = sha384;
/**
 * SHA3-256 hash the supplied message bytes to create a digest for signing.
 */
const sha3_256 = (message) => digest('sha3-256', message);
exports.sha3_256 = sha3_256;
/**
 * SHA3-384 hash the supplied message bytes to create a digest for signing.
 */
const sha3_384 = (message) => digest('sha3-384', message);
exports.sha3_384 = sha3_384;
function digest(algorithm, message) {
    return (0, crypto_1.createHash)(algorithm).update(message).digest();
}
//# sourceMappingURL=hashes.js.map