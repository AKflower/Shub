"use strict";
/*
 * Copyright 2023 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ECSignature_curve, _ECSignature_r, _ECSignature_s;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ECSignature = exports.newECPrivateKeySigner = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const elliptic_1 = require("elliptic");
const asn1_1 = require("./asn1");
const namedCurves = {
    'P-256': new elliptic_1.ec('p256'),
    'P-384': new elliptic_1.ec('p384'),
};
function newECPrivateKeySigner(key) {
    const { crv, d } = key.export({ format: 'jwk' });
    if (!crv) {
        throw new Error('Missing EC curve name');
    }
    if (!d) {
        throw new Error('Missing EC private key value');
    }
    const curve = getCurve(crv);
    const privateKey = Buffer.from(d, 'base64url');
    return (digest) => {
        const signature = curve.sign(digest, privateKey, { canonical: true });
        const signatureBytes = new Uint8Array(signature.toDER());
        return Promise.resolve(signatureBytes);
    };
}
exports.newECPrivateKeySigner = newECPrivateKeySigner;
function getCurve(name) {
    const curve = namedCurves[name];
    if (!curve) {
        throw new Error(`Unsupported curve: ${name}`);
    }
    return curve;
}
class ECSignature {
    constructor(curveName, compactSignature) {
        _ECSignature_curve.set(this, void 0);
        _ECSignature_r.set(this, void 0);
        _ECSignature_s.set(this, void 0);
        __classPrivateFieldSet(this, _ECSignature_curve, getCurve(curveName), "f");
        const sIndex = compactSignature.length / 2;
        const r = compactSignature.slice(0, sIndex);
        const s = compactSignature.slice(sIndex);
        __classPrivateFieldSet(this, _ECSignature_r, new bn_js_1.default(r), "f");
        __classPrivateFieldSet(this, _ECSignature_s, new bn_js_1.default(s), "f");
    }
    normalise() {
        const n = __classPrivateFieldGet(this, _ECSignature_curve, "f").n;
        const halfOrder = n.divn(2);
        if (__classPrivateFieldGet(this, _ECSignature_s, "f").gt(halfOrder)) {
            __classPrivateFieldSet(this, _ECSignature_s, n.sub(__classPrivateFieldGet(this, _ECSignature_s, "f")), "f");
        }
        return this;
    }
    toDER() {
        return (0, asn1_1.ecSignatureAsDER)(__classPrivateFieldGet(this, _ECSignature_r, "f"), __classPrivateFieldGet(this, _ECSignature_s, "f"));
    }
}
exports.ECSignature = ECSignature;
_ECSignature_curve = new WeakMap(), _ECSignature_r = new WeakMap(), _ECSignature_s = new WeakMap();
//# sourceMappingURL=ecdsa.js.map